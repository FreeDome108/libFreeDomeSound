#include "anantasound_core.hpp"
#include <iostream>
#include <iomanip>
#include <chrono>
#include <thread>
#include <vector>
#include <cmath>
#include <random>

using namespace AnantaSound;

class SimpleVinylDemo {
private:
    AnantaSoundCore sound_core_;
    std::mt19937 rng_;
    std::uniform_real_distribution<double> noise_dist_;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–Ω–∏–ª–æ–≤–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è
    struct VinylSettings {
        double turntable_speed = 33.33;  // RPM
        double needle_pressure = 2.0;    // –≥—Ä–∞–º–º—ã
        double wow_flutter = 0.1;        // –ø—Ä–æ—Ü–µ–Ω—Ç
        double surface_noise = 0.05;     // —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞
        bool mono_mode = false;
    };
    
    VinylSettings vinyl_settings_;
    
public:
    SimpleVinylDemo() : sound_core_(5.0, 3.0), rng_(std::random_device{}()), 
                       noise_dist_(0.0, 1.0) {
        std::cout << "üéµ Simple Vinyl Demo Initialized" << std::endl;
    }
    
    bool initialize() {
        if (!sound_core_.initialize()) {
            std::cerr << "Failed to initialize anAntaSound core" << std::endl;
            return false;
        }
        std::cout << "‚úÖ anAntaSound core initialized successfully" << std::endl;
        return true;
    }
    
    void demonstrateVinylEffects() {
        std::cout << "\nüéß Vinyl Effects Demonstration" << std::endl;
        std::cout << "===============================" << std::endl;
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Å—Ç–∏–Ω–æ–∫
        std::vector<std::pair<std::string, VinylSettings>> vinyl_types = {
            {"33 RPM Long Play", {33.33, 2.0, 0.1, 0.05, false}},
            {"45 RPM Single", {45.0, 2.0, 0.15, 0.08, false}},
            {"78 RPM Shellac", {78.26, 3.0, 0.5, 0.15, true}},
            {"16 RPM Transcription", {16.67, 1.5, 0.2, 0.1, false}}
        };
        
        for (const auto& vinyl_type : vinyl_types) {
            std::cout << "\nüéµ Testing: " << vinyl_type.first << std::endl;
            vinyl_settings_ = vinyl_type.second;
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–∞—Å—Ç–∏–Ω–∫–∏
            simulateVinylPlayback(10.0); // 10 —Å–µ–∫—É–Ω–¥
            
            std::this_thread::sleep_for(std::chrono::milliseconds(500));
        }
    }
    
    void simulateVinylPlayback(double duration) {
        std::cout << "  üìÄ Playing vinyl record..." << std::endl;
        std::cout << "    Speed: " << vinyl_settings_.turntable_speed << " RPM" << std::endl;
        std::cout << "    Needle pressure: " << vinyl_settings_.needle_pressure << "g" << std::endl;
        std::cout << "    Wow & flutter: " << vinyl_settings_.wow_flutter * 100 << "%" << std::endl;
        std::cout << "    Surface noise: " << vinyl_settings_.surface_noise * 100 << "%" << std::endl;
        std::cout << "    Mono mode: " << (vinyl_settings_.mono_mode ? "Yes" : "No") << std::endl;
        
        auto start_time = std::chrono::high_resolution_clock::now();
        double elapsed = 0.0;
        
        while (elapsed < duration) {
            // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –∑–≤—É–∫–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–Ω–∏–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            createVinylSoundField(elapsed);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
            sound_core_.update(0.1);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            if (static_cast<int>(elapsed) % 2 == 0 && elapsed > 0) {
                double progress = (elapsed / duration) * 100.0;
                std::cout << "    üìà Progress: " << std::fixed << std::setprecision(1) 
                          << progress << "%" << std::endl;
            }
            
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
            
            auto current_time = std::chrono::high_resolution_clock::now();
            elapsed = std::chrono::duration<double>(current_time - start_time).count();
        }
        
        std::cout << "  ‚úÖ Playback completed" << std::endl;
    }
    
    void createVinylSoundField(double time) {
        // –ë–∞–∑–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Å—Ç–∏–Ω–æ–∫
        double base_frequency = 440.0; // A4
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (vinyl_settings_.turntable_speed > 40.0) {
            base_frequency *= 1.35; // 45 RPM
        } else if (vinyl_settings_.turntable_speed > 70.0) {
            base_frequency *= 2.35; // 78 RPM
        } else if (vinyl_settings_.turntable_speed < 20.0) {
            base_frequency *= 0.5; // 16 RPM
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º wow & flutter —ç—Ñ—Ñ–µ–∫—Ç
        double flutter = std::sin(time * 2.0 * M_PI * 0.5) * vinyl_settings_.wow_flutter;
        base_frequency *= (1.0 + flutter);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π —à—É–º
        double noise = noise_dist_(rng_) * vinyl_settings_.surface_noise;
        base_frequency += noise * 100.0;
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        SphericalCoord position{2.0 + noise, M_PI/3 + flutter, M_PI/6, time};
        
        // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –∑–≤—É–∫–æ–≤–æ–µ –ø–æ–ª–µ
        QuantumSoundField vinyl_field = sound_core_.createQuantumSoundField(
            base_frequency, position, QuantumSoundState::COHERENT);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ
        sound_core_.processSoundField(vinyl_field);
    }
    
    void demonstrateVideoDataExtraction() {
        std::cout << "\nüìπ Video Data Extraction from Vinyl" << std::endl;
        std::cout << "====================================" << std::endl;
        
        std::cout << "üéØ Simulating video data extraction from vinyl grooves..." << std::endl;
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–≤–æ–∫ –≤–∏–Ω–∏–ª–∞
        for (int frame = 0; frame < 30; ++frame) {
            double time = frame / 30.0;
            
            // –°–æ–∑–¥–∞–µ–º "–≤–∏–¥–µ–æ –∫–∞–¥—Ä" –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            VideoFrameData video_data = extractVideoFromAudio(time);
            
            // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö
            createVideoBasedSoundField(video_data, time);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
            sound_core_.update(0.033); // ~30 FPS
            
            if (frame % 10 == 0) {
                std::cout << "  üìä Frame " << frame << ": " 
                          << video_data.width << "x" << video_data.height 
                          << ", brightness: " << std::fixed << std::setprecision(2) 
                          << video_data.brightness << std::endl;
            }
            
            std::this_thread::sleep_for(std::chrono::milliseconds(33));
        }
        
        std::cout << "‚úÖ Video extraction simulation completed" << std::endl;
    }
    
    struct VideoFrameData {
        int width = 640;
        int height = 480;
        double brightness = 0.5;
        std::vector<uint8_t> data;
        
        VideoFrameData() {
            data.resize(width * height * 3); // RGB
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            std::random_device rd;
            std::mt19937 gen(rd());
            std::uniform_real_distribution<double> dist(0.0, 1.0);
            for (size_t i = 0; i < data.size(); ++i) {
                data[i] = static_cast<uint8_t>(dist(gen) * 255);
            }
        }
    };
    
    VideoFrameData extractVideoFromAudio(double time) {
        VideoFrameData frame;
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—É–¥–∏–æ
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–≤–æ–∫
        
        // –Ø—Ä–∫–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã –∑–≤—É–∫–∞
        double audio_amplitude = std::sin(time * 2.0 * M_PI * 2.0) * 0.5 + 0.5;
        frame.brightness = audio_amplitude;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã
        double frequency = 440.0 + std::sin(time * 2.0 * M_PI * 0.5) * 200.0;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for (int y = 0; y < frame.height; ++y) {
            for (int x = 0; x < frame.width; ++x) {
                int index = (y * frame.width + x) * 3;
                
                // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω–æ–≤–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
                double wave = std::sin((x + y) * 0.01 + time * 2.0 * M_PI * frequency / 1000.0);
                double intensity = (wave + 1.0) * 0.5 * frame.brightness;
                
                frame.data[index] = static_cast<uint8_t>(intensity * 255);     // R
                frame.data[index + 1] = static_cast<uint8_t>(intensity * 200); // G
                frame.data[index + 2] = static_cast<uint8_t>(intensity * 150); // B
            }
        }
        
        return frame;
    }
    
    void createVideoBasedSoundField(const VideoFrameData& video_data, double time) {
        // –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö
        SphericalCoord position{3.0, M_PI/4, M_PI/3, time};
        
        // –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —è—Ä–∫–æ—Å—Ç–∏ –∫–∞–¥—Ä–∞
        double frequency = 220.0 + video_data.brightness * 400.0;
        
        QuantumSoundField video_field = sound_core_.createQuantumSoundField(
            frequency, position, QuantumSoundState::EXCITED);
        
        sound_core_.processSoundField(video_field);
    }
    
    void demonstratePlaybackHistory() {
        std::cout << "\nüìö Playback History Analysis" << std::endl;
        std::cout << "============================" << std::endl;
        
        std::cout << "üéØ Simulating analysis of vinyl playback history..." << std::endl;
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
        std::vector<std::string> playback_sessions = {
            "First play - 2023-01-15",
            "Second play - 2023-02-20", 
            "Third play - 2023-03-10",
            "Fourth play - 2023-04-05"
        };
        
        for (size_t i = 0; i < playback_sessions.size(); ++i) {
            std::cout << "\n  üìÄ Session " << (i + 1) << ": " << playback_sessions[i] << std::endl;
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Ö—É–¥—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –∫–∞–∂–¥—ã–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ–º
            double degradation = 1.0 + i * 0.1;
            vinyl_settings_.surface_noise *= degradation;
            vinyl_settings_.wow_flutter *= degradation;
            
            std::cout << "    Quality degradation: " << std::fixed << std::setprecision(1) 
                      << (degradation - 1.0) * 100 << "%" << std::endl;
            
            // –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            simulateVinylPlayback(3.0);
        }
        
        std::cout << "\n‚úÖ Playback history analysis completed" << std::endl;
    }
    
    void printStatistics() {
        std::cout << "\nüìä System Statistics" << std::endl;
        std::cout << "====================" << std::endl;
        
        auto stats = sound_core_.getStatistics();
        std::cout << "Active quantum fields: " << stats.active_fields << std::endl;
        std::cout << "Coherence ratio: " << std::fixed << std::setprecision(3) 
                  << stats.coherence_ratio << std::endl;
        std::cout << "Total processing time: " << std::fixed << std::setprecision(2) 
                  << "N/A" << "s" << std::endl;
    }
    
    void shutdown() {
        sound_core_.shutdown();
        std::cout << "Simple Vinyl Demo shutdown complete" << std::endl;
    }
};

int main() {
    std::cout << "üé¨ anAntaSound Simple Vinyl Demo" << std::endl;
    std::cout << "=================================" << std::endl;
    std::cout << "Version: " << getVersion() << std::endl;
    std::cout << "Build Info: " << getBuildInfo() << std::endl;
    
    SimpleVinylDemo demo;
    
    if (!demo.initialize()) {
        return 1;
    }
    
    std::cout << "\nChoose demo mode:" << std::endl;
    std::cout << "1. Vinyl effects demonstration" << std::endl;
    std::cout << "2. Video data extraction simulation" << std::endl;
    std::cout << "3. Playback history analysis" << std::endl;
    std::cout << "4. Run all demonstrations" << std::endl;
    std::cout << "Enter choice (1-4): ";
    
    std::string choice;
    std::getline(std::cin, choice);
    
    if (choice == "1") {
        demo.demonstrateVinylEffects();
    } else if (choice == "2") {
        demo.demonstrateVideoDataExtraction();
    } else if (choice == "3") {
        demo.demonstratePlaybackHistory();
    } else if (choice == "4") {
        demo.demonstrateVinylEffects();
        demo.demonstrateVideoDataExtraction();
        demo.demonstratePlaybackHistory();
    } else {
        std::cout << "Invalid choice, running all demonstrations" << std::endl;
        demo.demonstrateVinylEffects();
        demo.demonstrateVideoDataExtraction();
        demo.demonstratePlaybackHistory();
    }
    
    demo.printStatistics();
    demo.shutdown();
    
    return 0;
}
